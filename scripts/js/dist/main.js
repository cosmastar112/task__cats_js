/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "dist";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./classes/Consts.js":
/*!***************************!*\
  !*** ./classes/Consts.js ***!
  \***************************/
/*! exports provided: FILMS_URL, SPECIES_URL, PEOPLE_URL */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FILMS_URL\", function() { return FILMS_URL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SPECIES_URL\", function() { return SPECIES_URL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PEOPLE_URL\", function() { return PEOPLE_URL; });\n/* Ссылки на API */\nvar FILMS_URL = \"https://ghibliapi.herokuapp.com/films/\";\nvar SPECIES_URL = \"https://ghibliapi.herokuapp.com/species/\";\nvar PEOPLE_URL = \"https://ghibliapi.herokuapp.com/people/\"; // \t\"http://yii2/basic/web/index.php?r=cats/films\",\n// \t\"http://yii2/basic/web/index.php?r=cats/species\",\n// \t\"http://yii2/basic/web/index.php?r=cats/people\"\n\n//# sourceURL=webpack:///./classes/Consts.js?");

/***/ }),

/***/ "./classes/PrepareData.js":
/*!********************************!*\
  !*** ./classes/PrepareData.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return PrepareData; });\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar PrepareData =\n/*#__PURE__*/\nfunction () {\n  function PrepareData(filmsData, speciesData, peopleData, specieName) {\n    _classCallCheck(this, PrepareData);\n\n    this.filmsData = filmsData;\n    this.speciesData = speciesData;\n    this.peopleData = peopleData;\n    this.specieName = specieName;\n    var IS_DEV = false;\n\n    if (IS_DEV) {\n      this.filmsData = _films;\n      this.speciesData = _species;\n      this.peopleData = _people;\n      this.specieName = \"Cat\";\n    }\n  }\n\n  _createClass(PrepareData, [{\n    key: \"get\",\n    value: function get() {\n      var result = this.getFimsWithPeopleNames(this.filmsData, this.speciesData, this.peopleData, this.specieName);\n      return result;\n    }\n    /**\r\n    * Получить список фильмов, где каждому фильму соответствует список имен.\r\n    * Список имён содержит имена представителей вида, которые играли в фильме.\r\n    *\r\n    * На вход: \r\n    * \t@param filmsData = [ {}, {} ... ] - данные по фильмам\r\n    * \t@param speciesData = [ {}, {} ... ] - данные по видам\r\n    * \t@param peopleData = [ {}, {} ... ] - данные по представителям видов\r\n    * \t@param specieName = string - имя вида, по которому нужно произвести поиск\r\n    * На выход:\r\n    *\t@return [ {}, {}, ... ] - список объектов, где каждый объект - название фильма + список имен представителей вида\r\n    *\r\n    * Пример выходной информации: \r\n    *\t[\r\n    *\t  { Имя фильма1, [ Список имён1 представителей вида ] },\r\n    *\t  { Имя фильма2, [ Список имён2 представителей вида ] },\r\n    *\t  ...\r\n    *\t]\r\n    */\n\n  }, {\n    key: \"getFimsWithPeopleNames\",\n    value: function getFimsWithPeopleNames(filmsData, speciesData, peopleData, specieName) {\n      // return 1;\n      // console.log(filmData);\n      var self = this; // список объектов\n      // const list = filmsData.map(function(filmData) {\n\n      var list = filmsData.map(function (filmData) {\n        var names = self.getPeopleNamesInFilm(filmData, specieName);\n        var filmWithNames = self.setNamesList(filmData, names);\n        return filmWithNames;\n      });\n      return list;\n    }\n    /**\r\n    * Получить список имён представителей вида для фильма.\r\n    * Список содержит имена представителей вида, которые играли в фильме.\r\n    *\r\n    * На вход: \r\n    * \t@param filmData = [] - данные по фильму\r\n    * \t@param specieName = string - название вида\r\n    * На выход:\r\n    *\t@return [] - список имён представителей вида\r\n    *\r\n    * Пример выходной информации: \r\n    * @return [ Список имён представителей вида ]\r\n    */\n\n  }, {\n    key: \"getPeopleNamesInFilm\",\n    value: function getPeopleNamesInFilm(filmData, specieName) {\n      var names = []; // указанный вид играл в фильме?\n\n      var isPlay = this.isSpeciePlayInFilm(filmData, specieName);\n\n      if (isPlay) {\n        var urlFilm = this.getFilmUrl(filmData); // кто из представителей указанного вида снимался в фильме?\n\n        var peoplesUrlsBySpecie = this.getPeoplesUrls(specieName); // URL представителей вида\n\n        var peopleUrlsInFilm = this.getPeopleUrlsInFilm(urlFilm, peoplesUrlsBySpecie); // имена представителей вида\n\n        names = this.getPeopleNames(peopleUrlsInFilm);\n      }\n\n      return names;\n    }\n    /**\r\n    * Получить список URL представителей вида для фильма.\r\n    *\r\n    * На вход: \r\n    * \t@param urlFilm = [] - URL фильма\r\n    * \t@param peoplesUrlsBySpecie = [] - список URL представителей вида \r\n    * На выход:\r\n    *\t@return [] - список URL представителей вида, которые снимались в фильме\r\n    */\n\n  }, {\n    key: \"getPeopleUrlsInFilm\",\n    value: function getPeopleUrlsInFilm(urlFilm, peoplesUrlsBySpecie) {\n      var self = this;\n      var peoplesUrls = peoplesUrlsBySpecie.filter(function (peopleUrl) {\n        var peopleData = self.getPeopleData(peopleUrl);\n        var filmsWithPeople = self.getPeopleFilms(peopleData); // return (filmsWithPeople.includes(urlFilm));\n\n        return filmsWithPeople.indexOf(urlFilm) !== -1;\n      });\n      return peoplesUrls;\n    }\n    /**\r\n    * Проверить снимались ли в фильме представители вида.\r\n    *\r\n    * На вход: \r\n    * \t@param filmData = [] - данные по фильму\r\n    * \t@param specieName = string - название вида\r\n    * На выход:\r\n    *\t@return boolean - true если снимались, иначе false\r\n    */\n\n  }, {\n    key: \"isSpeciePlayInFilm\",\n    value: function isSpeciePlayInFilm(filmData, specieName) {\n      var filmUrl = this.getFilmUrl(filmData);\n      var metaObjectSpecie = this.getSpecieMetaObject(specieName);\n      var metaObjectFilms = this.getMetaObjectFilms(metaObjectSpecie); // console.log(metaObjectFilms);\n      // if ( metaObjectFilms.includes(filmUrl) ) {\n\n      if (metaObjectFilms.indexOf(filmUrl) !== -1) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\r\n    * Получить объект метаинформации вида.\r\n    *\r\n    * На вход: \r\n    * \t@param specieName = string - название вида\r\n    * На выход:\r\n    *\t@return {} - метаобъект вида (из API species)\r\n    */\n\n  }, {\n    key: \"getSpecieMetaObject\",\n    value: function getSpecieMetaObject(specieName) {\n      // console.log(this.speciesData);\n      var specieMetaObject = this.speciesData.filter(function (specieData) {\n        return specieData.name === specieName;\n      });\n      return specieMetaObject.pop();\n    }\n    /**\r\n    * Получить Url метаобъекта вида.\r\n    *\r\n    * На вход: \r\n    * \t@param metaObjectSpecie = {} - метаобъект вида (из API species)\r\n    * На выход:\r\n    *\t@return string - Url метаобъекта вида\r\n    *\r\n    */\n\n  }, {\n    key: \"getMetaObjectUrl\",\n    value: function getMetaObjectUrl(metaObjectSpecie) {\n      // console.log(metaObjectSpecie);\n      return metaObjectSpecie[\"url\"];\n    }\n    /**\r\n    * Получить список видов, которые играли в фильме.\r\n    *\r\n    * На вход: \r\n    * \t@param filmData = {} - данные по фильму\r\n    * На выход:\r\n    *\t@return [ string, string ... ] - список видов\r\n    *\r\n    * Пример выходной информации: \r\n    *\t[\r\n    *\t\tURL вида1,\r\n    *\t\tURL вида2,\r\n    *\t\t...\r\n    *\t]\r\n    */\n\n  }, {\n    key: \"getSpeciesInFilm\",\n    value: function getSpeciesInFilm(filmData) {\n      // console.log(filmData);\n      return filmData[\"species\"];\n    }\n    /**\r\n    * Получить url фильма.\r\n    *\r\n    * На вход: \r\n    * \t@param filmData = [] - данные по фильму\r\n    * На выход:\r\n    *\t@return string - url фильма\r\n    */\n\n  }, {\n    key: \"getFilmUrl\",\n    value: function getFilmUrl(filmData) {\n      return filmData[\"url\"];\n    }\n    /**\r\n    * Получить список фильмов, в которых играли представители вида\r\n    *\r\n    * На вход: \r\n    * \t@param metaObjectSpecie = {} - объект представителей вида\r\n    * На выход:\r\n    *\t@return [ string, string ... ] - список Url фильмов\r\n    *\r\n    * Пример выходной информации: \r\n    *\t[\r\n    *\t\tURL фильма1,\r\n    *\t\tURL фильма2,\r\n    *\t\t...\r\n    *\t]\r\n    */\n\n  }, {\n    key: \"getMetaObjectFilms\",\n    value: function getMetaObjectFilms(metaObjectSpecie) {\n      return metaObjectSpecie[\"films\"];\n    }\n    /**\r\n    * Получить список url представителей вида, которые участвовали в фильмах (не важно в каких).\r\n    *\r\n    * На вход: \r\n    * \t@param specieName = string - название вида\r\n    * На выход:\r\n    *\t@return [ string, string, ... ] - список url\r\n    *\r\n    * Пример выходной информации: \r\n    *\t[\r\n    *\t\t\"URL1 представителя вида\",\r\n    *\t\t\"URL2 представителя вида\",\r\n    *\t\t...\r\n    *\t]\r\n    */\n\n  }, {\n    key: \"getPeoplesUrls\",\n    value: function getPeoplesUrls(specieName) {\n      var specieMetaObject = this.getSpecieMetaObject(specieName);\n      return specieMetaObject[\"people\"];\n    }\n    /**\r\n    * Получить данные представителя вида.\r\n    *\r\n    * На вход: \r\n    * \t@param peopleUrl = string - url представителя вида\r\n    * На выход:\r\n    *\t@return {} - объект с данными из API people\r\n    */\n\n  }, {\n    key: \"getPeopleData\",\n    value: function getPeopleData(peopleUrl) {\n      var result = this.peopleData.filter(function (people) {\n        return people[\"url\"] === peopleUrl;\n      });\n      return result.pop();\n    }\n    /**\r\n    * Получить фильмы, в которых снимался представитель вида.\r\n    *\r\n    * На вход: \r\n    * \t@param peopleData = {} - объект представителя вида\r\n    * На выход:\r\n    *\t@return [ string, string, ... ] - список URL фильмов\r\n    */\n\n  }, {\n    key: \"getPeopleFilms\",\n    value: function getPeopleFilms(peopleData) {\n      return peopleData[\"films\"];\n    }\n    /**\r\n    * Получить имя представителя вида.\r\n    *\r\n    * На вход: \r\n    * \t@param peopleData = {} - объект представителя вида\r\n    * На выход:\r\n    *\t@return string - имя представителя вида\r\n    */\n\n  }, {\n    key: \"getPeopleName\",\n    value: function getPeopleName(peopleData) {\n      return peopleData[\"name\"];\n    }\n    /**\r\n    * Получить название фильма.\r\n    *\r\n    * На вход: \r\n    * \t@param filmData = [] - данные по фильму\r\n    * На выход:\r\n    *\t@return string - название фильма\r\n    */\n\n  }, {\n    key: \"getFilmTitle\",\n    value: function getFilmTitle(filmData) {\n      return filmData[\"title\"];\n    }\n    /**\r\n    * Получить имена представителей вида.\r\n    *\r\n    * На вход: \r\n    * \t@param peopleUrls = [] - список Url представителей вида\r\n    * На выход:\r\n    *\t@return [] - список имён представителей вида\r\n    */\n\n  }, {\n    key: \"getPeopleNames\",\n    value: function getPeopleNames(peopleUrls) {\n      var self = this;\n      var names = peopleUrls.map(function (peopleName) {\n        var peopleData = self.getPeopleData(peopleName);\n        return self.getPeopleName(peopleData);\n      });\n      return names;\n    }\n    /**\r\n    * Создать объект-связь вида: { Имя фильма, [ Список имён представителей вида, которые играли в фильме ] }\r\n    * Свойство film объекта - название фильма\r\n    * Свойство peopleNames объекта - список имёна представителей вида, которые играли в фильме\r\n    *\r\n    * На вход: \r\n    * \t@param filmData = {} - данные о фильме\r\n    * \t@param names = [] - список имён представителей вида\r\n    * На выход:\r\n    *\t@return {}\r\n    */\n\n  }, {\n    key: \"setNamesList\",\n    value: function setNamesList(filmData, names) {\n      var list = {\n        film: this.getFilmTitle(filmData),\n        peopleNames: names\n      };\n      return list;\n    }\n  }]);\n\n  return PrepareData;\n}();\n\n\n\n//# sourceURL=webpack:///./classes/PrepareData.js?");

/***/ }),

/***/ "./classes/View.js":
/*!*************************!*\
  !*** ./classes/View.js ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return View; });\n\n/**\r\n* Создать таблицу и заполнить данными. \r\n* Таблица не создаётся с нуля, её надо создать предварительно и передать в конструктор селектор класса.\r\n* В указанную таблицу будут добавлены блоки thead и tbody, ячейки заполняются данными. \r\n*/\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar View =\n/*#__PURE__*/\nfunction () {\n  /**\r\n  * @constructor\r\n  * @params {Array[Object, Object,...]} data\r\n  * @example\r\n  * const data = [ \r\n  *\t{\r\n  *\t\t\"film\":\"Castle in the Sky\",\r\n  *\t\t\"peopleNames\":[]\r\n  *\t},\r\n  *\t{\r\n  *\t\t\"film\":\"Arrietty\",\r\n  *\t\t\"peopleNames\":[\"Niya\"]\r\n  * }];\r\n  * constructor(data, \"cats__table\");\r\n  */\n  function View(data, tableClassSelector) {\n    _classCallCheck(this, View);\n\n    this.data = data;\n    this.tableClassSelector = tableClassSelector;\n    var IS_DEV = false;\n\n    if (IS_DEV) {\n      this.data = _prepared;\n    }\n  }\n  /**\r\n  * Создать таблицу, заполнить данными.\r\n  */\n\n\n  _createClass(View, [{\n    key: \"createTable\",\n    value: function createTable() {\n      // console.log(this.data);\n      var table = document.getElementsByClassName(this.tableClassSelector);\n      table = table[0]; // создаю блок заголовов таблицы\n\n      var thead = this.createThead([\"ID\", \"Фильмы\", \"Кошачие\"]); // создаю тело таблицы\n\n      var tbody = this.createTbody(); // прикрепляю к существующей таблице\n\n      table.appendChild(thead);\n      table.appendChild(tbody);\n    }\n    /**\r\n    * Создать тело таблицы.\r\n    * @return {Element} tbody\r\n    */\n\n  }, {\n    key: \"createTbody\",\n    value: function createTbody() {\n      var tbody = document.createElement(\"tbody\"); // строки\n\n      var trs = this.createTrs(this.data.length);\n      trs.map(function (tr) {\n        tbody.appendChild(tr);\n      });\n      return tbody;\n    }\n    /**\r\n    * Создать указанное число строк таблицы\r\n    * @params {Number} num - число элементов данных\r\n    * @return {Array[Element,Element,...]} trs\r\n    */\n\n  }, {\n    key: \"createTrs\",\n    value: function createTrs(num) {\n      var trs = [];\n\n      for (var i = 0; i < num; i++) {\n        trs.push(this.createTr(i));\n      }\n\n      return trs;\n    }\n    /**\r\n    * Создать строку таблицы\r\n    * @params {Number} index - индекс элемента данных\r\n    * @return {Element} tr\r\n    */\n\n  }, {\n    key: \"createTr\",\n    value: function createTr(index) {\n      // console.log(this.data);\n      var tr = document.createElement(\"tr\"); // Данные в ячейках\n\n      var ID = index + 1;\n      var film = this.data[index][\"film\"];\n      var cats = this.data[index][\"peopleNames\"]; // console.log(cats);\n\n      var tds = [this.createTd(ID), this.createTd(film), this.createTd(cats)];\n      tds.map(function (td) {\n        tr.appendChild(td);\n      });\n      return tr;\n    }\n    /**\r\n    * Создать ячейку таблицы \r\n    * @params {String|Array} text - элемент данных\r\n    * @return {Element} td\r\n    */\n\n  }, {\n    key: \"createTd\",\n    value: function createTd(text) {\n      var td = document.createElement(\"td\"); // если строка состоит из нескольких элементов, то каждый элемент с новой строки\n\n      if (Array.isArray(text) && text.length > 0) {\n        for (var i = 0; i < text.length; i++) {\n          var p = document.createElement(\"p\");\n          var textNode = document.createTextNode(text[i]);\n          p.appendChild(textNode);\n          td.appendChild(p);\n        }\n      } else {\n        // console.log(text);\n        // иначе просто добавить элемент\n        var _textNode = document.createTextNode(text);\n\n        td.appendChild(_textNode);\n      }\n\n      return td;\n    }\n    /**\r\n    * Создать блок заголовков таблицы\r\n    * @params {Array[String,String,...]} texts - заголовки таблицы\r\n    * @return {Element} thead\r\n    * @example: createThead([\"Фильмы\", \"Кошачие\"])\r\n    */\n\n  }, {\n    key: \"createThead\",\n    value: function createThead(texts) {\n      var thead = document.createElement(\"thead\");\n\n      for (var i = 0; i < texts.length; i++) {\n        var th = this.createTh(texts[i]);\n        thead.appendChild(th);\n      }\n\n      return thead;\n    }\n    /**\r\n    * Создать заголовок таблицы \r\n    * @params {String} text - заголовок таблицы\r\n    * @return {Element} th\r\n    * @example: createTh(\"Фильмы\")\r\n    */\n\n  }, {\n    key: \"createTh\",\n    value: function createTh(text) {\n      var th = document.createElement(\"th\");\n      var textNode = document.createTextNode(text);\n      th.appendChild(textNode);\n      return th;\n    } // @params {Bool} visible\n\n  }, {\n    key: \"setVisible\",\n    value: function setVisible() {\n      var table = document.getElementsByClassName(this.tableClassSelector);\n      table = table[0]; // table.removeAttribute(\"class\");\n\n      var className = \".cats__table_visible\";\n      table.setAttribute(\"class\", \"cats__table \" + className);\n    }\n  }]);\n\n  return View;\n}();\n\n\n\n//# sourceURL=webpack:///./classes/View.js?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _classes_PrepareData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./classes/PrepareData */ \"./classes/PrepareData.js\");\n/* harmony import */ var _classes_View__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./classes/View */ \"./classes/View.js\");\n/* harmony import */ var _classes_Consts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./classes/Consts */ \"./classes/Consts.js\");\n\n\n // import $ from \"jquery\";\n// Обработчик нажатия кнопки\n// Загрузка, обработка и отображение данных\n// Управление кнопкой и preloader'ом\n\nfunction show() {\n  setPreloaderVisible(true); // показывать preloader пока идет загрузка данных\n\n  this.remove(); // удалить кнопку \"Показать\"\n\n  load().then(function (data) {\n    // console.log(\"Fetch finished\");\n    // console.log(data);\n    setPreloaderVisible(false); // убрать preloader когда загрузка данных завершена\n\n    var preparedData = prepareData(data); // подготовка данных перед отображением\n\n    showData(preparedData); // представление данных\n  })[\"catch\"](function (error) {\n    console.log('Error:' + error);\n    showError();\n  });\n}\n/**\r\n* Загрузка (последовательная) данных.\r\n* @return {Promise}\r\n*/\n\n\nfunction load() {\n  var _data = []; // контейнер для хранения данных\n\n  return new Promise(function (resolve, reject) {\n    loadJson(_classes_Consts__WEBPACK_IMPORTED_MODULE_2__[\"FILMS_URL\"]).then(function (response1) {\n      // console.log(response1);\n      // порция данных сохраняется в контейнере\n      _data.push(response1);\n\n      return loadJson(_classes_Consts__WEBPACK_IMPORTED_MODULE_2__[\"SPECIES_URL\"]);\n    }).then(function (response2) {\n      // console.log(response2);\n      // порция данных сохраняется в контейнере\n      _data.push(response2);\n\n      return loadJson(_classes_Consts__WEBPACK_IMPORTED_MODULE_2__[\"PEOPLE_URL\"]);\n    }).then(function (response3) {\n      // console.log(response3);\n      // порция данных сохраняется в контейнере\n      _data.push(response3);\n\n      resolve(_data);\n    })[\"catch\"](function (error) {\n      reject(error);\n    });\n  });\n}\n/** \r\n* Загрузка одной порции данных\r\n* @param {String} url\r\n* @return {Promise}\r\n*/\n\n\nfunction loadJson(url) {\n  return fetch(url).then(function (response) {\n    return response.json();\n  });\n}\n/** \r\n* Обработка данных после загрузки.\r\n* @params data {Array[films,species,people]}\r\n*/\n\n\nfunction prepareData(data) {\n  // передаю данные для обработки\n  var films = data[0];\n  var species = data[1];\n  var people = data[2];\n  var specieName = \"Cat\";\n  var dataHandler = new _classes_PrepareData__WEBPACK_IMPORTED_MODULE_0__[\"default\"](films, species, people, specieName);\n  var preparedData = dataHandler.get();\n  return preparedData;\n}\n/** \r\n* Отображение данных после обработки.\r\n* @params {Array[Object,Object,...]} data\r\n*/\n\n\nfunction showData(data) {\n  var view = new _classes_View__WEBPACK_IMPORTED_MODULE_1__[\"default\"](data, \"cats__table\"); // представление данных\n\n  view.createTable(); // создать таблицу\n\n  view.setVisible(true); // показать таблицу\n}\n/** \r\n* Показать на странице ошибку работы приложения.\r\n*/\n\n\nfunction showError() {\n  var elem = document.getElementsByClassName('preloader');\n  elem.item(0).innerHTML = \"<p>Произошла ошибка при загрузке данных. Данные не будут отображены.</p>\";\n} // Показать/скрыть preloader\n// @example: setPreloaderVisible(false|true);\n\n\nfunction setPreloaderVisible(visible) {\n  var preloader = document.getElementsByClassName(\"preloader\");\n  preloader = preloader[0];\n  var className = \"preloader__visible_true\";\n\n  if (!visible) {\n    className = \"preloader__visible_false\";\n  }\n\n  preloader.setAttribute(\"class\", \"preloader \" + className);\n} // ----------------------------------------------------------------------\n// Обработчик нажатия кнопки \"Показать\"\n// Обработчик устаналивается после загрузки документа\n// Точка входа\n\n\nwindow.onload = setButtonHandler; // ----------------------------------------------------------------------\n\nfunction setButtonHandler() {\n  var btn = document.getElementById(\"cats__btn_show_table\");\n  btn.onclick = show; // --> Обработчик нажатия кнопки\n}\n\n//# sourceURL=webpack:///./index.js?");

/***/ })

/******/ });